<style>
    /* Estilo principal del cursor */
    #custom-cursor {
        position: fixed;
        pointer-events: none;
        z-index: 9999;
        width: 26px;
        height: 26px;
        top: 0;
        left: 0;
        transform: translate(-50%, -50%);
        display: none; /* Ocultar inicialmente */
    }

    #custom-cursor span {
        position: absolute;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 50%;
        pointer-events: none;
        will-change: transform;
    }

    /* Elimina el cursor estándar */
    body.cursor-active {
        cursor: none;
    }

    /* Efecto de mezcla de colores */
    .color-blend {
        position: fixed;
        width: 260px;
        height: 260px;
        background: 
            radial-gradient(circle at 25% 50%, 
                rgba(255, 255, 255, 0.6) 0%,
                rgba(255, 255, 255, 0.3) 30%,
                transparent 60%
            ),
            radial-gradient(circle at 75% 50%, 
                rgba(255, 255, 255, 0.6) 0%,
                rgba(255, 255, 255, 0.3) 30%,
                transparent 60%
            );
        border-radius: 50%;
        pointer-events: none;
        transform: translate(-50%, -50%);
        filter: blur(25px) contrast(1.1);
        mix-blend-mode: lighten;
        z-index: 9999;
        opacity: 0.85;
        will-change: transform;
        display: none; /* Ocultar inicialmente */
    }
</style>

<!-- Cursor personalizado -->
<div id="custom-cursor"></div>

<!-- Efecto de mezcla de colores -->
<div class="color-blend"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script>
    const cursor = document.getElementById("custom-cursor");
    const blend = document.querySelector('.color-blend');
    const cursorSections = document.querySelectorAll('.cursor'); // Selecciona las secciones con la clase "cursor"

    let isOverCursorSection = false;
    const amount = 20;
    const sineDots = Math.floor(amount * 0.3);
    const width = 26;
    const idleTimeout = 150;
    let lastFrame = 0;
    let mousePosition = { x: 0, y: 0 };
    let dots = [];
    let timeoutID;
    let idle = false;

    class Dot {
        constructor(index = 0) {
            this.index = index;
            this.anglespeed = 0.05;
            this.x = 0;
            this.y = 0;
            this.scale = 1 - 0.05 * index;
            this.range = width / 2 - (width / 2) * this.scale + 2;
            this.limit = width * 0.75 * this.scale;
            this.element = document.createElement("span");
            gsap.set(this.element, { scale: this.scale });
            cursor.appendChild(this.element);
        }

        lock() {
            this.lockX = this.x;
            this.lockY = this.y;
            this.angleX = Math.PI * 2 * Math.random();
            this.angleY = Math.PI * 2 * Math.random();
        }

        draw(delta) {
            if (!idle || this.index <= sineDots) {
                gsap.set(this.element, { x: this.x, y: this.y });
            } else {
                this.angleX += this.anglespeed;
                this.angleY += this.anglespeed;
                this.y = this.lockY + Math.sin(this.angleY) * this.range;
                this.x = this.lockX + Math.sin(this.angleX) * this.range;
                gsap.set(this.element, { x: this.x, y: this.y });
            }
        }
    }

    function init() {
        window.addEventListener("mousemove", onMouseMove);
        window.addEventListener("touchmove", onTouchMove);
        lastFrame += new Date();
        buildDots();
        render();
    }

    function startIdleTimer() {
        timeoutID = setTimeout(goInactive, idleTimeout);
        idle = false;
    }

    function resetIdleTimer() {
        clearTimeout(timeoutID);
        startIdleTimer();
    }

    function goInactive() {
        idle = true;
        for (let dot of dots) {
            dot.lock();
        }
    }

    function buildDots() {
        for (let i = 0; i < amount; i++) {
            let dot = new Dot(i);
            dots.push(dot);
        }
    }

    const onMouseMove = (event) => {
        if (isOverCursorSection) {
            mousePosition.x = event.clientX;
            mousePosition.y = event.clientY;
            resetIdleTimer();
        }
    };

    const onTouchMove = () => {
        if (isOverCursorSection) {
            mousePosition.x = event.touches[0].clientX;
            mousePosition.y = event.touches[0].clientY;
            resetIdleTimer();
        }
    };

    const render = (timestamp) => {
        const delta = timestamp - lastFrame;
        positionCursor(delta);
        lastFrame = timestamp;
        requestAnimationFrame(render);
    };

    const positionCursor = (delta) => {
        let x = mousePosition.x;
        let y = mousePosition.y;
        dots.forEach((dot, index, dots) => {
            let nextDot = dots[index + 1] || dots[0];
            dot.x = x;
            dot.y = y;
            dot.draw(delta);
            if (!idle || index <= sineDots) {
                const dx = (nextDot.x - dot.x) * 0.35;
                const dy = (nextDot.y - dot.y) * 0.35;
                x += dx;
                y += dy;
            }
        });
    };

    // Función para activar el efecto
    function activateEffect() {
        cursor.style.display = 'block';
        blend.style.display = 'block';
        document.body.classList.add('cursor-active');
    }

    // Función para desactivar el efecto
    function deactivateEffect() {
        cursor.style.display = 'none';
        blend.style.display = 'none';
        document.body.classList.remove('cursor-active');
    }

    // Añadir eventos a las secciones con la clase 'cursor'
    cursorSections.forEach(section => {
        section.addEventListener('mouseenter', () => {
            isOverCursorSection = true;
            activateEffect();
        });

        section.addEventListener('mouseleave', () => {
            isOverCursorSection = false;
            deactivateEffect();
        });
    });

    // Inicializar el efecto
    init();

    // Animación para el efecto de mezcla de colores
    let mouseX = 0, mouseY = 0, posX = 0, posY = 0;
    const inertia = 0.1;

    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
    });

    function animate() {
        posX += (mouseX - posX) * inertia;
        posY += (mouseY - posY) * inertia;
        
        blend.style.left = `${posX}px`;
        blend.style.top = `${posY}px`;
        
        requestAnimationFrame(animate);
    }
    animate();
</script>